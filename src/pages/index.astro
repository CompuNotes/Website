---
// Import necessary components and styles
import MenuBar from "../components/MenuBar.astro";
import Footer from "../components/Footer.astro";
import "tailwindcss/tailwind.css";

// Fetch the list of documents from the API
const response = await fetch("https://django.narurm.eu/compunotesapi/file/");
const documents = await response.json();
---

<MenuBar />

<main class="bg-gray-100 min-h-screen py-10">
  <div class="container mx-auto px-6">
    <div class="relative max-w-xl mx-auto">
      <input
        id="searchInput"
        type="text"
        placeholder="Search for courses, users or document names"
        class="w-full p-4 pl-12 rounded-full shadow-md"
      />
      <svg
        class="absolute top-1/2 left-4 transform -translate-y-1/2 h-6 w-6 text-gray-500"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        stroke-width="2"
        stroke="currentColor"
        fill="none"
        stroke-linecap="round"
        stroke-linejoin="round"
      >
        <path stroke="none" d="M0 0h24v24H0z"></path>
        <circle cx="10" cy="10" r="7"></circle>
        <line x1="21" y1="21" x2="15" y2="15"></line>
      </svg>
    </div>
    <section class="mt-10">
      <h2 class="text-2xl font-semibold mb-4">Best rated uploads</h2>
      <div id="results" class="grid grid-cols-3 gap-6"></div>
    </section>
  </div>
</main>

<script>
  const searchInput = document.getElementById("searchInput");
  const resultsContainer = document.getElementById("results");
  const accessToken = localStorage.getItem("accessToken");

  async function fetchAndRenderDocuments(query = "") {
    const response = await fetch(
      `https://django.narurm.eu/compunotesapi/file/?ordering=-avg_rating&search=${encodeURIComponent(query)}`
    );
    const documents = await response.json();

    resultsContainer.innerHTML = ""; // Clear previous results

    if (documents.length === 0) {
      resultsContainer.innerHTML =
        "<p class='col-span-3 text-center text-gray-500'>No documents found.</p>";
      return;
    }

      for (const doc of documents) {
    const div = document.createElement("div");
    div.className = "bg-blue-300 p-4 rounded-xl shadow-md";
    div.innerHTML = `
      <div class="bg-gray-200 h-32 flex items-center justify-center">
        <a href="${doc.file}" target="_blank" rel="noopener noreferrer">
          ${doc.title}
        </a>
      </div>
      <div class="flex justify-between items-center mt-2">
        <div class="flex items-center space-x-1" data-average-rating="${doc.rating}">
          ${[1, 2, 3, 4, 5]
            .map((star) => {
              if (star <= Math.floor(doc.rating)) {
                // Full star
                return `
                  <svg data-id="${doc.id}" data-rating="${star}" class="star h-6 w-6 text-yellow-400 cursor-pointer" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 17.75l-6.172 3.245 1.179-6.873-4.993-4.867 6.9-1.002L12 2l3.086 6.253 6.9 1.002-4.993 4.867 1.179 6.873z" />
                  </svg>
                `;
              } else if (star - 1 < doc.rating && doc.rating < star) {
                // Half star
                return `
                  <svg data-id="${doc.id}" data-rating="${star}" class="star h-6 w-6 text-yellow-400 cursor-pointer" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 24 24" stroke="currentColor">
                    <defs>
                      <linearGradient id="half-star-${doc.id}-${star}">
                        <stop offset="50%" stop-color="currentColor" />
                        <stop offset="50%" stop-color="transparent" />
                      </linearGradient>
                    </defs>
                    <path fill="url(#half-star-${doc.id}-${star})" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 17.75l-6.172 3.245 1.179-6.873-4.993-4.867 6.9-1.002L12 2l3.086 6.253 6.9 1.002-4.993 4.867 1.179 6.873z" />
                  </svg>
                `;
              } else {
                // Empty star
                return `
                  <svg data-id="${doc.id}" data-rating="${star}" class="star h-6 w-6 text-gray-400 cursor-pointer" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 17.75l-6.172 3.245 1.179-6.873-4.993-4.867 6.9-1.002L12 2l3.086 6.253 6.9 1.002-4.993 4.867 1.179 6.873z" />
                  </svg>
                `;
              }
            })
            .join("")}
        </div>
        <span class="text-sm text-gray-700">Rating: ${doc.rating.toFixed(1)}</span>
      </div>
      <p class="text-sm">${doc.title}</p>
      <p class="text-xs text-gray-700">${doc.user}</p>
    `;
    resultsContainer.appendChild(div);
  }

    // Add hover and click events to stars
    document.querySelectorAll(".star").forEach((star) => {

      // Reset to average rating on mouseout
      star.addEventListener("mouseout", (e) => {
        const parent = e.currentTarget.parentElement;
        const averageRating = parent.dataset.averageRating;
        const stars = parent.querySelectorAll(".star");
        stars.forEach((s, index) => {
          s.classList.toggle("text-yellow-400", index < averageRating);
          s.classList.toggle("text-gray-400", index >= averageRating);
        });
      });

      // Click event to submit rating
      star.addEventListener("click", async (e) => {
        const id = e.currentTarget.dataset.id;
        const rating = e.currentTarget.dataset.rating;

        if (!id || !rating) {
          console.error("Missing id or rating:", { id, rating });
          return;
        }

        await fetch(`https://django.narurm.eu/compunotesapi/file/${id}/add_rating/`, {
          method: "POST",
          headers: {
            Authorization: `Bearer ${accessToken}`,
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ rating: parseInt(rating) }),
        });

        // Refresh documents after rating
        fetchAndRenderDocuments(searchInput.value.trim());
      });
    });
  }

  // Fetch and render documents on page load
  fetchAndRenderDocuments();

  // Search functionality with debounce
  let debounce;
  searchInput.addEventListener("input", (e) => {
    clearTimeout(debounce);
    debounce = setTimeout(() => {
      const query = e.target.value.trim();
      fetchAndRenderDocuments(query);
    }, 300); // 300 ms debounce
  });
</script>

<Footer />